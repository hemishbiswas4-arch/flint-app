// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ## AUTHENTICATION & USER MODELS ##
model User {
  id            String      @id                          // Firebase UID
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("emailVerified") @db.Timestamptz(6)
  image         String?
  usageCount    Int         @default(10) @map("usageCount")

  // ✅ New profile fields
  username    String?   @unique
  bio         String?   @db.Text
  coverPhoto  String?

  // Relations
  posts     Post[]
  likes     PostLike[]
  comments  Comment[]

  // ✅ New relations
  followers     Follow[]       @relation("UserFollowers")
  following     Follow[]       @relation("UserFollowing")
  conversations Conversation[] @relation("UserConversations")
  messages      Message[]      @relation("UserMessages")

  @@map("users")
}

model accounts {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?
}

model sessions {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @db.VarChar(255)
}

model verification_token {
  identifier String
  expires    DateTime @db.Timestamptz(6)
  token      String

  @@id([identifier, token])
}

// ## COMMUNITY HUB MODELS ##
model Post {
  id          String      @id @default(uuid())
  title       String
  textContent String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  authorId String
  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  places   PostPlace[]
  images   PostImage[]
  likes    PostLike[]
  comments Comment[]     // ✅ relation to comments
}

model PostPlace {
  id            String @id @default(uuid())
  googlePlaceId String
  name          String
  lat           Float
  lng           Float
  displayOrder  Int

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostImage {
  id       String @id @default(uuid())
  imageUrl String

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostLike {
  userId String
  postId String
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  @@id([userId, postId]) // ✅ composite key (no need for extra id column)
}

model Comment {
  id        String   @id @default(uuid())
  text      String   // expose `text` to code, keep DB column as "content"
  createdAt DateTime @default(now())
  postId    String
  userId    String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ## NEW SOCIAL FEATURES ##
model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String

  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([followerId, followingId]) // prevent duplicate follows
}

model Conversation {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())

  users     User[]    @relation("UserConversations")
  messages  Message[]
}

model Message {
  id            String     @id @default(uuid())
  text          String
  createdAt     DateTime   @default(now())

  senderId      String
  sender        User       @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
